##############################################################################
# User Sybase SQL
#
# - 수정후에는 서버를 다시 시작해야 합니다.
# - 개발자외에는 수정을 금합니다.
# - 날짜: 선언 DATETIME, 비교 CONVERT(DATETIME, ?)
# - 변수: 문자 VARCHAR, 숫자 INT
##############################################################################

# 접속 기록을 추가한다.
SQL:InsertAccessHistory
	INSERT INTO
		ACCESSHISTORY (
			ACCESSTIME,
			IP,
			USERS_IDX,
			ACCESSFROM
		) VALUES (
			GETDATE(),
			?, ?, ?
		) 

# 마지막 접속 기록을 수정한다.
SQL:UpdateLastAccess
	UPDATE
		USERS
	SET
		USERS_LOGCOUNT = USERS_LOGCOUNT + 1,
		USERS_LASTHOST = ?,
		USERS_LASTDATE = GETDATE()
	WHERE
		USERS_IDX = ?


# 사용자 정보를 검색한다.
SQL:SelectUser
	SELECT
		USERS_IDX,
		USERS_ID,
		USERS_PASSWD,
		DOMAIN,
		USERS_HOMEDIR,
		USERS_PERMIT,
		USERS_NAME,
		USERS_ENGNAME,
		USERS_NICKNAME,
		USERS_USENAME,
		USERS_AUTORE,
		USERS_AUTORESTMT,
		USERS_ABSENT,
		USERS_ABSENT_RESTMT,
		USERS_OPT_FWD,
		USERS_OPT_FWD_SAVE,
		USERS_FWD_LIST,
		USERS_READDR,
		convert(varchar,datepart(yy, USERS_ABSENT_SDATE)) +'-'+convert(varchar,datepart(mm, USERS_ABSENT_SDATE))+'-'+convert(varchar,datepart(dd, USERS_ABSENT_SDATE))+' '+convert(varchar,datepart(hh, USERS_ABSENT_SDATE))+':'+convert(varchar,datepart(mi, USERS_ABSENT_SDATE))+':'+convert(varchar,datepart(ss, USERS_ABSENT_SDATE)) USERS_ABSENT_SDATE,
		convert(varchar,datepart(yy, USERS_ABSENT_EDATE)) +'-'+convert(varchar,datepart(mm, USERS_ABSENT_EDATE))+'-'+convert(varchar,datepart(dd, USERS_ABSENT_EDATE))+' '+convert(varchar,datepart(hh, USERS_ABSENT_EDATE))+':'+convert(varchar,datepart(mi, USERS_ABSENT_EDATE))+':'+convert(varchar,datepart(ss, USERS_ABSENT_EDATE)) USERS_ABSENT_EDATE,
		USERS_MAX_VOLUME,
		USERS_CUR_VOLUME,
		USERS_SPAM_LEVEL,
		USERS_ISOPEN
	FROM
		USERS
	WHERE
		USERS_IDX = ?
	UNION
	SELECT
		A.USERS_IDX,
		A.USERS_ID,
		A.USERS_PASSWD,
		A.DOMAIN,
		A.USERS_HOMEDIR,
		A.USERS_PERMIT,
		A.USERS_NAME,
		A.USERS_ENGNAME,
		A.USERS_NICKNAME,
		A.USERS_USENAME,
		A.USERS_AUTORE,
		A.USERS_AUTORESTMT,
		A.USERS_ABSENT,
		A.USERS_ABSENT_RESTMT,
		A.USERS_OPT_FWD,
		A.USERS_OPT_FWD_SAVE,
		A.USERS_FWD_LIST,
		A.USERS_READDR,
		convert(varchar,datepart(yy, A.USERS_ABSENT_SDATE)) +'-'+convert(varchar,datepart(mm, A.USERS_ABSENT_SDATE))+'-'+convert(varchar,datepart(dd, A.USERS_ABSENT_SDATE))+' '+convert(varchar,datepart(hh, A.USERS_ABSENT_SDATE))+':'+convert(varchar,datepart(mi, A.USERS_ABSENT_SDATE))+':'+convert(varchar,datepart(ss, A.USERS_ABSENT_SDATE)) USERS_ABSENT_SDATE,
		convert(varchar,datepart(yy, A.USERS_ABSENT_EDATE)) +'-'+convert(varchar,datepart(mm, A.USERS_ABSENT_EDATE))+'-'+convert(varchar,datepart(dd, A.USERS_ABSENT_EDATE))+' '+convert(varchar,datepart(hh, A.USERS_ABSENT_EDATE))+':'+convert(varchar,datepart(mi, A.USERS_ABSENT_EDATE))+':'+convert(varchar,datepart(ss, A.USERS_ABSENT_EDATE)) USERS_ABSENT_EDATE,
		A.USERS_MAX_VOLUME,
		A.USERS_CUR_VOLUME,
		A.USERS_SPAM_LEVEL,
		A.USERS_ISOPEN
	FROM
		USERS A,
		ACCOUNT B
	WHERE
		B.ACCOUNT_IDX = ?
		AND
		B.USERS_IDX = A.USERS_IDX
		AND
		B.ACCOUNT_ISVALID = 1
		AND
		(
			B.ACCOUNT_ISDATED = 0
			OR
			(
				B.ACCOUNT_ISDATED = 1
				AND
				ACCOUNT_SDATE <= GETDATE()
				AND
				ACCOUNT_EDATE >= GETDATE()
			)
		)

# 사용자가 존재하는지 여부를 검사한다.
SQL:IsExistsUser
	SELECT
		COUNT(*)
	FROM
		USERS
	WHERE
		USERS_IDX = ? 

# 주소록 목록을 검색한다.
SQL:SelectAddressList
	SELECT
		ADDRESS_EMAIL
	FROM
		ADDRESS
	WHERE
		USERS_IDX = ? 

# 관리자 필터링 목록을 검색한다.
SQL:SelectAdminFilterList
	SELECT
		FILTER_TYPE,
		FILTER_KEYWORD
	FROM
		FILTER
	WHERE
		FILTER_AUTH = ?
		AND
		SUBSTRING(USERS_IDX, CHARINDEX('@', USERS_IDX) + 1, CHAR_LENGTH(USERS_IDX) ) = ?

# 사용자 필터링 목록을 검색한다.
SQL:SelectUserFilterList
	SELECT
		FILTER_TYPE,
		FILTER_KEYWORD
	FROM
		FILTER
	WHERE
		USERS_IDX = ?
		AND
		FILTER_AUTH = ?

# 도메인 사용 권한을 검색한다.
SQL:SelectDomainCertifyFlag
	SELECT
		DOMAIN_CERTIFY
	FROM
		DOMAIN
	WHERE
		DOMAIN = ?

# 도메인 그룹 사용 권한을 검색한다.
SQL:SelectDomainFunctionFlag
	SELECT
		DOMAIN_FUNCTION_KEY
	FROM
		DOMAIN
	WHERE
		DOMAIN = ?

# 사용자 그룹 사용 권한을 검사한다.
SQL:SelectUserGroupFunctionFlag
	SELECT
		B.USER_GROUP_FUNCTION
	FROM
		USER_GROUP_LIST A,
		USER_GROUP B
	WHERE
		A.USERS_IDX = ?
		AND
		A.USER_GROUP_IDX = B.USER_GROUP_IDX

# 데이터베이스에서 암호화한 값을 받는다.
SQL:SelectCryptPassword
	SELECT
		PASSWORD(?)		
		
# LDAP 유저정보 SELECT
SQL:SelectLdapUserSearch
	SELECT
		ADDR.USERS_NAME CN,
		ADDR.USERS_TELNO HOMEPHONE,
		TRIM(ADDR.USERS_ADDRESS1 || ADDR.USERS_ADDRESS2) HOMEPOSTALADDRESS,
		ADDR.USERS_IDX MAIL,
		ADDR.USERS_CELLNO MOBILE,
		ADDR.USERS_COMPNAME O,
		ADDR.USERS_DEPARTMENT OU,
		'' POSTALADDRESS,
		ADDR.USERS_ZIPCODE POSTALCODE,
		ADDR.USERS_TELNO TELEPHONENUMBER,
		'' TITLE,
		ADDRGROUP.USER_GROUP_NAME ADDRESS_GROUP
	FROM 
		USERS ADDR
		LEFT OUTER JOIN USER_GROUP_LIST
		ADDRGROUPLIST ON ADDR.USERS_IDX = ADDRGROUPLIST.USERS_IDX
		LEFT OUTER JOIN USER_GROUP
		ADDRGROUP ON ADDRGROUPLIST.USER_GROUP_IDX = ADDRGROUP.USER_GROUP_IDX
		
	WHERE
		ADDR.DOMAIN = ?
	AND
	    (
		ADDR.USERS_NAME LIKE ?
	OR
	  	ADDR.USERS_IDX LIKE ?
	OR
		ADDRGROUP.USER_GROUP_NAME LIKE ?
	    )
	UNION
	SELECT
		ADDR.USERS_NAME CN,
		ADDR.USERS_TELNO HOMEPHONE,
		TRIM(ADDR.USERS_ADDRESS1 || ADDR.USERS_ADDRESS2) HOMEPOSTALADDRESS,
		ACUT.ACCOUNT_IDX MAIL,
		ADDR.USERS_CELLNO MOBILE,
		ADDR.USERS_COMPNAME O,
		ADDR.USERS_DEPARTMENT OU,
		'' POSTALADDRESS,
		ADDR.USERS_ZIPCODE POSTALCODE,
		ADDR.USERS_TELNO TELEPHONENUMBER,
		'' TITLE,
		'' ADDRESS_GROUP
	FROM
		USERS ADDR,
		ACCOUNT ACUT
	WHERE
		ACUT.ACCOUNT_IDX like ?
		AND
		ADDR.USERS_IDX = ACUT.USERS_IDX
		AND
		ACUT.ACCOUNT_ISVALID = 1
		AND
		(
			ACUT.ACCOUNT_ISDATED = 0
			OR
			(
				ACUT.ACCOUNT_ISDATED = 1
				AND
				ACCOUNT_SDATE <= sysdate
				AND
				ACCOUNT_EDATE >= sysdate
			)
		)
